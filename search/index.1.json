[{"authors":[{"title":"WuHanqing","url":"/authors/wuhanqing/"}],"categories":[],"content":"程序并发运行时，如果多个线程同时对内存变量，进行读取和修改，可能导致错误的处理结果。 Go语言中，如果无法确定两个 goroutine 中代码的执行顺序。就可以说这两个 goroutine 是并发执行的。\n并发和竞态 程序并发运行时，如果多个线程同时对内存变量，进行读取和修改，可能导致错误的处理结果。 例: 一个收款账号，同时收到多笔打款. 这时，我们说这个程序存在 数据竞态。\nGo语言中，如果无法确定两个 goroutine 中代码的执行顺序。就可以说这两个 goroutine 是并发执行的。\n如果一段代码无论是顺序执行还是并发执行，结果都是正确的，那就可以说这个代码是 并发安全的。\n消除竞态 不要多个 goroutine 中去访问同一个变量。 goroutine + channel: 通过 channel 阻塞来更新变量.\n这也符合 Go 的设计理念：不要通过共享内存来通信，而应该通过通信来共享内存。\n同一时间只允许一个 goroutine 访问变量 同一时间只允许一个 goroutine 访问变量，其他 goruotine 需要等到当前的访问结束后，才能访问，这样也可以消除竞态。 本文重点介绍此方案\nGo 提供的并发工具 互斥锁 sync.Mutex 互斥锁 是解决竞态最经典的工具，Go语言使用 sync.Mutex.\n原理: 如果要访问一个资源，必须拿到这个资源的锁，才有资格访问. 其他 goroutine 想访问，必须等当前 goroutine 释放了锁，抢到锁之后再访问.\n每个拿到锁的 goroutine 都需要保证在对变量的访问结束之后，把锁释放掉. 即使发生在异常情况，也需要释放.\n这里可以使用 defer 来保证最终会释放锁：\nvar mu sync.Mutex var balance int func Deposit(amount int) { mu.Lock() defer mu.Unlock() balance = balance + amount } func Balance() int { mu.Lock() defer mu.Unlock() return balance } 读写互斥锁 sync.RWMutex 上面的互斥锁解决了访问数据的竞态问题，但是读余额的操作有点低效。每次来读余额的时候，都还需要去抢锁，实际上，这个变量如果没有改变，即使同时被多个 goroutine 读，也不会产生并发安全的问题。\n我们想要的一个理想的场景就是，如果这个变量没有在写入，就可以运行多个 goroutine 同时读，这样可以大大提高效率。 Go语言提供 sync.RWMutex(读写互斥锁)，解决此问题。\nvar mu sync.RWMutex // 替换 sync.Mutex var balance int Go 也提供了这个工具，那就是读写锁。这个锁读与读是不互斥的，简单来说就是这个锁可以保证同时只能有一个 goroutine 在写入，如果有 goroutine 在写入，其他的 goroutine 既不能读，也不能写，但允许多个 goroutine 同时来读。\nsync.Once sync.Once 可以保证代码只会执行一遍，多用于资源初始化等场景。\no := \u0026amp;sync.Once{} for i := 0; i \u0026lt; 100; i++ { o.Do(func(){ go func() { Deposit(100) }() go func() { Deposit(100) }() }) } // 休眠一秒，让上面的 goroutine 执行完成 time.Sleep(1 * time.Second) fmt.Println(Balance()) 竞态检测器 很多处在竞态的错误很难发现，Go 语言中提供了一个工具，可以帮忙检查代码中是否存在竞态。使用起来很简单，只需要在以下命令之后加上 -race 参数就可以：\ngo run -race go build -race go test -race 编译器会对代码在执行时对所有共享变量的访问，如果发现一个 goroutine 写入一个变量之后，没有任何同步的操作，就有另外一个 goroutine 读写了这个变量，那就说明这里存在竞态，就会报错.\nGolang开发中如何解决共享变量问题 https://www.jb51.net/article/223657.htm\n","date":"February 15, 2023","img":"","lang":"zh-cn","langName":"简体中文","largeImg":"","permalink":"/posts/go-share-var/","series":[],"smallImg":"","tags":[{"title":"hugo","url":"/tags/hugo/"},{"title":"golang","url":"/tags/golang/"}],"timestamp":1676446916,"title":"Golang语言共享内存变量方法总结"},{"authors":[{"title":"WuHanqing","url":"/authors/wuhanqing/"}],"categories":[],"content":"简介 本文旨在为Go语言初学者提供快速入门指南，从环境安装和设置，到项目编译打包，学会Go开发的流程。 Go语言继承C语言的理念，语法类似，奉行简约风格，没有其他面向对象语言的类和继承的概念。 Golang的初步掌握，在于充分理解 指针 和 接口 的概念，并灵活使用。 本教程着重Go项目的整体理解和实践，不重点解说变量和函数使用等语法细节，语法教程资源丰富，请自行在网上扩展学习。\n一份源码，处处编译 JAVA以跨平台著称，号称\u0026quot;一次编译，处处运行\u0026quot;。实际上，每台机器，都必须安装JAVA虚拟机能运行。 所以，从跨平台的表现上看，JAVA对比普通脚本语言并无太大优势。\nGo和C一样，一份源码，在任意操作系统上，直接编译成二进制可执行文件，便可在其他机器上独立运行。（指运行环境和编译环境一致。如: 在win-x64系统上编译，在win-x64系统上运行）\n环境安装 Go安装包下载链接，请以官方显示的不同操作系统平台的Go最新版本链接为准: https://go.dev/dl/\nLinux 下载Go文件压缩包并解压，设置Go环境变量\n# 下载go环境压缩包，链接可自行替换为最新版本 wget -c https://go.dev/dl/go1.19.3.linux-amd64.tar.gz # 解压缩到/usr/local目录 tar -C /usr/local -xzf go1.19.3.linux-amd64.tar.gz # 添加go可执行文件所在的目录到环境变量。 # 可在系统初始化文件 /etc/profile 的最末行添加代码: export PATH=$PATH:/usr/local/go/bin vim /etc/profile # 手动执行初始化文件，使得环境变量更改生效 source /etc/profile # 验证go是否安装成功。 go version Mac 同Linux\nWindows 下载Go环境安装文件，安装结束后，安装程序自动设置Go环境变量\n下载并安装文件: https://go.dev/dl/go1.19.3.windows-amd64.msi 打开cmd命令窗口验证go命令: go version\n环境设置 查看所有go环境设置项的值: go env\n输入如下命令，更改默认设置项以方便后续开发:\n# 开启GO111MODULE，方便第三方包的导入 go env -w GO111MODULE=on # 使用国内Go模块代理，加速第三方包导入速度 go env -w GOPROXY=https://goproxy.cn,direct 项目创建 在新目录初始化本地项目(myproject)，生成 go.mod 文件: go mod init myproject\n新建 main.go 入口文件，通过 import 语法导入包，在 func main() 入口函数中编写代码\n更新依赖，生成 go.sum 文件: go mod tidy\n调试运行: go run .\n编译成二进制可执行文件(myproject.exe): go build .\nmain.go 文件示例（提取百度首页热搜）:\n最新源码: https://github.com/iotames/miniutils/tree/main/examples/myproject\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;log\u0026#34; \u0026#34;github.com/iotames/miniutils\u0026#34; ) func main() { // 构建HTTP请求(默认GET方法) req := miniutils.NewHttpRequest(\u0026#34;https://www.baidu.com\u0026#34;) // 设置HTTP请求头 req.SetRequestHeader(\u0026#34;user-agent\u0026#34;, \u0026#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.81 Safari/533.33\u0026#34;) // 执行HTTP请求 err := req.Do(nil) if err != nil { log.Println(err) return } body := string(req.BodyBytes) // 提取网页中，以`\u0026lt;span class=\u0026#34;title-content-title\u0026#34;\u0026gt;`字符串开头，`\u0026lt;/span\u0026gt;` 字符串结尾的所有字符串片段。 strfind := miniutils.NewStrfind(body).SetRegexpBeginEnd(`\u0026lt;span class=\u0026#34;title-content-title\u0026#34;\u0026gt;`, `\u0026lt;/span\u0026gt;`) hots := strfind.DoFind().GetAll(false) hotsMsg := \u0026#34;百度热搜:\\n\u0026#34; for i, v := range hots { hotsMsg += fmt.Sprintf(\u0026#34;[%d]-----\u0026gt;[%s]\\n\u0026#34;, i, v) } log.Println(hotsMsg) } 运行结果:\n----RequestBegin---GET: https://www.baidu.com ------------------------------------------- User-Agent: [Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.81 Safari/533.33] ----RequestEnd---(200 OK)---------------------- 2022/11/18 14:59:21 百度热搜: [0]-----\u0026gt;[“两个全球倡议”有何含义] [2]-----\u0026gt;[携手应对挑战 加快经济复苏] [2]-----\u0026gt;[新华社：一封了之、一放了之要不得] [3]-----\u0026gt;[张伯礼：奥密克戎难以彻底消灭] [4]-----\u0026gt;[31省份昨日新增本土2276+22853] [5]-----\u0026gt;[女子戴隐形10年角膜长满新生血管] 至此，一个简单的 Hello Word 应用程序编写完成, 用于提取百度首页的热搜关键词. 程序编译成独立的可执行文件: myproject.exe(Linux或Mac系统文件名为myproject). 请打开命令行窗口执行:\nWindows: myproject.exe Linux: ./myproject Linux系统若报权限问题，请先赋予文件可执行权限: chmod +x myproject\n语法特性 package 包 Go语言使用包(package)来组织golang工程项目。特点如下:\n一个包一个文件夹，包名通常为小写英文字母，建议和目录名相同。 包目录下每个go文件首行内容为: package [包名]。如 package main, package model, package service, package webserver 一个包的函数和变量是共享的，可直接调用。但要被其他包调用，函数名或变量的首字母必须大写。 可编译项目的根目录，必须为main包，且必须存在 func main() 函数作为应用入口。(若项目作为第三方库使用，则无man包和main函数) 包声明: 在go源码文件首行，使用 package 语句。 包导入: 在包声明语句下面，使用 import 语法导入，使用 / 符号连接不同文件夹的包名。 golang官方包: fmt, runtime, encoding/json, net/http, golang.org/x/net/html 本地包: 包导入格式本地项目名/本地包名，如 myproject/model, myproject/webserver/data 第三方包: github.com/iotames/miniutils, xorm.io/xorm 循环语句 Go基础语法 在线练习: https://go.dev/play/\nfor语句 result := \u0026#34;\u0026#34; for i := \u0026#39;a\u0026#39;; i \u0026lt;= \u0026#39;g\u0026#39;; i++ { result += fmt.Sprintf(\u0026#34;%c\u0026#34;, i) } fmt.Println(result) // 输出 \u0026#34;abcdefg\u0026#34; result := \u0026#34;\u0026#34; for i := 0; i \u0026lt;= 5; i++ { result += fmt.Sprintf(\u0026#34;%d\u0026#34;, i) } fmt.Println(result) // 输出 \u0026#34;012345\u0026#34; for range 语句 mapstr := map[string]string{\u0026#34;a\u0026#34;:\u0026#34;aa11\u0026#34;, \u0026#34;b\u0026#34;:\u0026#34;bb22\u0026#34;} result := \u0026#34;\u0026#34; for k, v := range mapstr { result += fmt.Sprintf(\u0026#34;%s-\u0026gt;%s\u0026#34;, k, v) } fmt.Println(result) // 输出 \u0026#34;a-\u0026gt;aa11b-\u0026gt;bb22\u0026#34; sliceStr:= []string{\u0026#34;aa11\u0026#34;, \u0026#34;bb22\u0026#34;} result := \u0026#34;\u0026#34; for i, v := range sliceStr { result += fmt.Sprintf(\u0026#34;%d-\u0026gt;%s\u0026#34;, i, v) } fmt.Println(result) // 输出 \u0026#34;0-\u0026gt;aa111-\u0026gt;bb22\u0026#34; 教程源码 本教程调用库 miniutils，对日常开发的常见功能进行封装，不依赖其他第三方库，包含 examples 示例源码。\n同步仓库:\nGithub: https://github.com/iotames/miniutils\nGitee: https://gitee.com/catmes/miniutils\n安装go开发环境: https://go.dev/doc/install\n","date":"November 19, 2022","img":"","lang":"zh-cn","langName":"简体中文","largeImg":"","permalink":"/posts/quick-golang/","series":[],"smallImg":"","tags":[{"title":"golang","url":"/tags/golang/"}],"timestamp":1668848282,"title":"Go语言快速入门指南"},{"authors":[{"title":"WuHanqing","url":"/authors/wuhanqing/"}],"categories":[],"content":"创建Git仓库 Github上创建仓库，仓库名为 username.github.io, 其中 username 必须为实际GitHub账号的用户名。\n安装hugo 很多主题需要 扩展版 的hugo才能安装。故应安装 扩展版的hugo.\n安装方法有二: 1. 直接下载 Releases 发布包. 2. 通过 go install 命令安装\n下载hugo发布包(文件名含extended): https://github.com/gohugoio/hugo/releases\nGo 安装: go env -w CGO_ENABLED=1, go install --tags extended github.com/gohugoio/hugo@latest\n验证安装:\nhugo version hugo v0.106.0-e08ce30fe4779e7d8a8395d7021314b915648cb4+extended windows/amd64 BuildDate=2022-11-17T18:33:40Z VendorInfo=gohugoio 创建博客 # 1. Create a New Site hugo new site quickstart # 2. Add a Theme cd quickstart git init git submodule add https://github.com/leafee98/hugo-theme-flat themes/hugo-theme-flat echo theme = \\\u0026#34;hugo-theme-flat\\\u0026#34; \u0026gt;\u0026gt; config.toml # 3. Add Some Content hugo new posts/my-first-post.md # 4. Start the Hugo server hugo server -D # 5. Site Configuration vim config.toml # 6. Build static pages hugo -D 配置 # config.toml title = \u0026#34;我的博客\u0026#34; theme=\u0026#34;hugo-theme-flat\u0026#34; [taxonomies] tag = \u0026#34;tags\u0026#34; series = \u0026#34;series\u0026#34; category = \u0026#34;categories\u0026#34; 每个post的头部也相应增加对应的分类\ndate: \u0026#34;2018-01-09T16:22:25+08:00\u0026#34; draft: false title: \u0026#34;Blog养成记(4) 增加tags等分类\u0026#34; tags: [\u0026#34;hugo\u0026#34;] series: [\u0026#34;Blog养成记\u0026#34;] categories: [\u0026#34;杂技浅尝\u0026#34;] module主题 有些主题为 Hugo module，必须额外配置: 在项目跟目录运行: hugo mod init 项目名(博客名) 在配置文件 config.toml 添加模块配置项\n# config.toml [[module.imports]] path = \u0026#34;github.com/CaiJimmy/hugo-theme-stack/v3\u0026#34; https://stack.jimmycai.com/guide/getting-started\nhttps://pages.github.com/\nhttps://gohugo.io/getting-started/quick-start/\nHugo Config https://ithelp.ithome.com.tw/articles/10241051\nHugo配置分类 https://orianna-zzo.github.io/sci-tech/2018-01/blog%E5%85%BB%E6%88%90%E8%AE%B04-hugo%E4%B8%AD%E5%A2%9E%E5%8A%A0tags%E7%AD%89%E5%88%86%E7%B1%BB/\n","date":"November 19, 2022","img":"","lang":"zh-cn","langName":"简体中文","largeImg":"","permalink":"/posts/hugo-blog/","series":[],"smallImg":"","tags":[{"title":"hugo","url":"/tags/hugo/"},{"title":"golang","url":"/tags/golang/"}],"timestamp":1668824537,"title":"使用Hugo创建Github Pages博客"},{"authors":[],"categories":[{"title":"Installation","url":"/categories/installation/"}],"content":"This guide show you how to install on Arch Linux.\n","date":"September 6, 2022","img":"","lang":"zh-cn","langName":"简体中文","largeImg":"","permalink":"/docs/installation/linux/archlinux/","series":[{"title":"Guide","url":"/series/guide/"}],"smallImg":"","tags":[{"title":"Linux","url":"/tags/linux/"},{"title":"Arch Linux","url":"/tags/arch-linux/"}],"timestamp":1662475343,"title":"Install on Arch Linux"},{"authors":[],"categories":[],"content":"A fast, responsive and feature-rich Hugo theme for blog and documentations site.\n","date":"September 6, 2022","img":"","lang":"zh-cn","langName":"简体中文","largeImg":"","permalink":"/docs/introduction/","series":[{"title":"Guide","url":"/series/guide/"}],"smallImg":"","tags":[],"timestamp":1662475343,"title":"Introduction"},{"authors":[],"categories":[{"title":"Installation","url":"/categories/installation/"}],"content":"This guide show you how to install on Ubuntu.\n","date":"September 6, 2022","img":"","lang":"zh-cn","langName":"简体中文","largeImg":"","permalink":"/docs/installation/linux/ubuntu/","series":[{"title":"Guide","url":"/series/guide/"}],"smallImg":"","tags":[{"title":"Linux","url":"/tags/linux/"},{"title":"Ubuntu","url":"/tags/ubuntu/"}],"timestamp":1662475343,"title":"Install on Ubuntu"},{"authors":[],"categories":[{"title":"Installation","url":"/categories/installation/"}],"content":"This guide show you how to install on Windows.\n","date":"September 6, 2022","img":"","lang":"zh-cn","langName":"简体中文","largeImg":"","permalink":"/docs/installation/windows/","series":[{"title":"Guide","url":"/series/guide/"}],"smallImg":"","tags":[{"title":"Windows","url":"/tags/windows/"}],"timestamp":1662475343,"title":"Install on Windows"},{"authors":[{"title":"Razon Yang","url":"/authors/razonyang/"}],"categories":[{"title":"Image","url":"/categories/image/"}],"content":"Since v1.0.0-alpha.1, HBS supports much more image processing methods. Such as Crop, Fit and Fill images. You can also apply filters on an image.\nSee also Image Processing.\n","date":"July 8, 2022","img":"/news/2022/07/more-image-processing-methods/featured-sample.webp","lang":"zh-cn","langName":"简体中文","largeImg":"/news/2022/07/more-image-processing-methods/featured-sample_huc6bcc14d597e300fd9ab4aae536c68a5_498412_500x0_resize_q75_h2_box_2.webp","permalink":"/news/2022/07/more-image-processing-methods/","series":[{"title":"News","url":"/series/news/"}],"smallImg":"/news/2022/07/more-image-processing-methods/featured-sample_huc6bcc14d597e300fd9ab4aae536c68a5_498412_180x0_resize_q75_h2_box_2.webp","tags":[{"title":"Crop","url":"/tags/crop/"},{"title":"Fit","url":"/tags/fit/"},{"title":"Fill","url":"/tags/fill/"},{"title":"Filters","url":"/tags/filters/"}],"timestamp":1657251287,"title":"More Image Processing Methods"},{"authors":[],"categories":[],"content":"See also README.md.\n","date":"April 17, 2022","img":"","lang":"zh-cn","langName":"简体中文","largeImg":"","permalink":"/blog/readme/","series":[],"smallImg":"","tags":[{"title":"README","url":"/tags/readme/"}],"timestamp":1650184529,"title":"README"},{"authors":[],"categories":[],"content":"Written in Go, Hugo is an open source static site generator available under the Apache Licence 2.0. Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.\nHugo makes use of a variety of open source projects including:\nhttps://github.com/yuin/goldmark https://github.com/alecthomas/chroma https://github.com/muesli/smartcrop https://github.com/spf13/cobra https://github.com/spf13/viper Hugo is ideal for blogs, corporate websites, creative portfolios, online magazines, single page applications or even a website with thousands of pages.\nHugo is for people who want to hand code their own website without worrying about setting up complicated runtimes, dependencies and databases.\nWebsites built with Hugo are extremely fast, secure and can be deployed anywhere including, AWS, GitHub Pages, Heroku, Netlify and any other hosting provider.\nLearn more and contribute on GitHub.\n","date":"February 28, 2019","img":"","lang":"zh-cn","langName":"简体中文","largeImg":"","permalink":"/about/","series":[],"smallImg":"","tags":[],"timestamp":1551312000,"title":"About"},{"authors":[],"categories":[],"content":"","date":"January 1, 1","img":"","lang":"zh-cn","langName":"简体中文","largeImg":"","permalink":"/offline/","series":[],"smallImg":"","tags":[],"timestamp":-62135596800,"title":"Offline"},{"authors":[],"categories":[],"content":"","date":"January 1, 1","img":"","lang":"zh-cn","langName":"简体中文","largeImg":"","permalink":"/contact/","series":[],"smallImg":"","tags":[],"timestamp":-62135596800,"title":"联系我们"}]
